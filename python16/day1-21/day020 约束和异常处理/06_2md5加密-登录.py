#!/usr/bin/env python
#-*- coding:utf-8 -*-
#@time:  2020/6/13 7:44

''''''
'''
需求：写一个登录检验密码的逻辑
思路：
1、数据库中，用户名是明文存储，但是密码是密文存储
   密码存储的是密码明文通过md5加盐后的密码密文
2、用户名在库里是明文存储，而不是密文存储的原因：
    如果用户名存储的是密文，那么用户登录页面后，右上角会显示用户名
    此时会显示一个密文的用户名，不合适，应该显示明文的用户名
3、登录密码在库里是密文存储，而不是明文存储的原因：
    考虑到安全
4、数据库里存储的是 比如：jack  2bd9a3ce4d49765e7d16a05dc89779b9（用户注册的时候，把密码通过md5-加盐加密后，存储到数据库的）
5、用户在登录页面输入的是 jack 123
    将123通过md5-加盐加密后的值，和数据库中注册时间的加盐加密值进行对比，相等，则校验通过
'''

import hashlib

#下面这个不定参数的写法，适合写2个参数，就传入2个参数；写一个参数，就传入1个参数
#方法1
def md5_algorithm(password,*args):
    # print(*args)  #(b'234',)   #元组的元素
    # print(args)   #(b'234',)   #元组
    if len(args) > 0:  #这里的args是元组，当不定参数的长度大于0
        obj = hashlib.md5(args[0])   #创建一个md5对象,小括号里面是加盐，盐必须是字节
    else:  #2 当不定参数长度是0
        obj = hashlib.md5()  # 创建一个md5对象,小括号里面是加盐，不写就是不加盐
    obj.update(password.encode('utf-8'))  # 把要加密的内容（字节）给到md5对象,必须把字符串转换成字节
    val = obj.hexdigest()  # 获取密文
    return val

#方法2
def md5_algorithm2(*args):
    # print(*args)  #(b'234',)   #元组的元素
    # print(args)   #(b'234',)   #元组
    if len(args) == 2:  #这里的args是元组，当不定参数的长度大于0
        obj = hashlib.md5(args[1])   #创建一个md5对象,小括号里面是加盐，盐必须是字节
    elif len(args) == 1 :  #2 当不定参数长度是0
        obj = hashlib.md5()  # 创建一个md5对象,小括号里面是加盐，不写就是不加盐
    obj.update(args[0].encode('utf-8'))  # 把要加密的内容（字节）给到md5对象,必须把字符串转换成字节
    val = obj.hexdigest()  # 获取密文
    return val

ret = md5_algorithm('123',b'234')  #参数1是密码-字符串，而不能是int；参数2是盐，必须是字节，b开头---有盐    bc4e71768c878be0e0636839756a8af0
# ret = md5_algorithm('123')  #参数1是密码-字符串，而不能是int；参数2是盐，不写，默认不传盐      ---没有盐      202cb962ac59075b964b07152d234b70
# ret = md5_algorithm(123,b'234')  #参数1是密码-字符串，而不能是int  int会报错 AttributeError: 'int' object has no attribute 'encode'
print(ret)

username = input('请输入用户名:')
password_plaintext = input('请输入密码:')   #明文密码

password_ciphertext = md5_algorithm(password_plaintext,b'234')  #返回密文密码
if username == 'jack' and password_ciphertext == 'bc4e71768c878be0e0636839756a8af0':
    print('密码验证通过，登录成功')   #正确的用户名是'jack' 正确的明文密码是'123'(加密算法是md5-加盐  盐是b'234'# )
else:
    print('登录失败')

'''
小结：
一、不定参数：
*args在形参的位置：*表示把多个参数，聚合打包成一个元组
args在函数体中   ：args是一个元组
*args在函数体中  ：*args是把元组解包成多个元素

二、密码：
1、密码必须是字符串，而不能是数字
   即密码可以是'123'，而不能是123  （加引号是字符串，不叫引号是数字）
2、密码分为明文密码和密文密码
   明文密码是：用户登录的时候，输入的字符串
   密文密码是：用户注册的时候，md5加密算法根据用户输入的明文密码，将明文密码加密成密文密码后，存储到了数据库

三、登录时候的密码校验
1、用户名在数据库存储的是明文
   原因：用户登录成功后，在页面右上角会显示用户的用户名，如果数据库存储的用户名是密文用户名，这里会显示密文，不合适
2、密码在数据库存储的是密文密码
3、用户注册
   1、用户输入的明文用户名和明文密码
   2、数据库会直接存储明文用户名
   3、算法把用户输入的明文密码通过md5-加盐加密成密文密码后，存储到数据库
4、用户登录用户名和密码校验
    1、根据用户输入的明文用户名和数据库中存储的明文用户名比对
    2、然后根据用户输入的明文密码，通过mds-加盐算法加密成密文密码后，和数据库中存储的密文密码进行比对
    3、如果明文用户名和密文密码都比对一致，则返回登录成功；否则，登录失败

四、如何实现传1个参数就是-不加盐，传2个参数就是-加盐？
思路：
不定参数来实现
1、形式参数1是位置参数，传明文密码
   形式参数2是不定参数 *args，传盐
2、如果实参传2个参数，参数1是明文密码，参数2是盐-字节
   就走加盐的逻辑
   判断不定参数args的长度（在形参的写法是*args）大于0，就取args[0]
   这里的args是元组
3、如果实参传1个参数，参数1是明文密码
   就不走加盐的逻辑
   判断不定参数args的长度（在形参的写法是*args）等于0，
   这里的args是元组

'''















