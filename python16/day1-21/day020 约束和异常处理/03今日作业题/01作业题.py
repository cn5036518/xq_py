#!/usr/bin/env python
#-*- coding:utf-8 -*-
#@time:  2020/6/20 17:46

''''''
'''
2、接口的作用
概念：如果一个类中所有的方法都是抽象方法，那么这个类就是接口。
      接口是抽象类的一个特例
作用：用来约束子类
      子类继承父类抽象类-接口后，就必须重写接口中的所有抽象方法

3、抽象类和抽象方法的作用
概念：
    抽象方法：
        方法名上面是@abstractmethod
        方法体是pass
    抽象类：
        包含抽象方法的类就是抽象类
        写法：继承metaclass = ABCMeta
作用：
    1、对子类进行约束
        如果父类是抽象类，那么子类就必须重写父类中的抽象方法，
        如果子类没有重写父类的抽象方法，那么子类也是抽象类
        抽象类是不能新建对象的

4、抽象类+抽象方法和接口的区别
概念：
    接口：如果抽象类中的所有方法全部是抽象方法，那么这个抽象类就是接口
          接口是抽象类的一个特例

区别：
    1、抽象类除了包含抽象方法，还可以包含普通方法
    2、接口里面的所有方法全部是抽象方法
        接口是抽象类的一个特例，接口和抽象类是从属关系
        抽象类包含了接口

5、python中应该如何约束子类中指定的方法
    方法1：父类中写一个方法，方法体是raise NotImplementError("提示语")
            子类在继承父类的时候，就必须重写父类的方法，否则会报错
    方法2：父类抽象类，抽象类中的抽象方法体是pass
            子类在继承父类的时候，就必须重写父类的抽象方法，否则会报错

6、如何自定义异常？
    定义一个类，继承Exception，类里面写pass

7、md5加密是否可以被反解？
   1、md5加密是不可逆的，不可被反解
   2、但是可以通过撞库的方式，查询出来一些简单的
       比如：没有加盐的
       对于加盐，尤其是盐的长度较长较复杂的时候，撞库基本无效

8、为了防止撞库，md5加密需要做什么操作并写出代码
    操作是：加盐，且盐的长度较长较复杂

9、程序为什么要写日志？
    1、面对不必现的问题，错误日志可以帮助查找当时的错误现场
    2、我们自己的电脑上复现不了，拿到客户那里，就能出现的问题的排查
    3、生产环境的错误现场做了记录后，方便排查问题

'''

'''
需求：md5加盐，防止撞库

思路：
1、创建一个md5的对象,加盐，盐必须是字节，b开头
2、将要加密的字符串给到md5对象
3、产生密文
'''

import hashlib

# 1、创建一个md5的对象
md5 = hashlib.md5(b'hahaadsd')    #加盐

# 2、将要加密的字符串给到md5对象
md5.update('jack'.encode('utf-8'))   #要加密的字符串必须转换成字节才行

# 3、产生密文
cyphertext = md5.hexdigest()
print(cyphertext)   #9b598da22b071792c356b3e6b58b5367
print('-----------------------------1 基本写法')

def md5_encrypt(s1,salt):
    md5 = hashlib.md5(salt)  # 加盐

    # 2、将要加密的字符串给到md5对象
    md5.update(s1.encode('utf-8'))  # 要加密的字符串必须转换成字节才行

    # 3、产生密文
    cyphertext = md5.hexdigest()
    print(cyphertext)

md5_encrypt('jack',b'hahaadsd')
print('-----------------------------2 函数')

def md5_encrypt2(*args):
    if len(args) == 1:
        md5 = hashlib.md5()  # 不加盐
    elif len(args) >1 :
        md5 = hashlib.md5(args[-1])  # 加盐

        # 2、将要加密的字符串给到md5对象
    md5.update(args[0].encode('utf-8'))  # 要加密的字符串必须转换成字节才行

    # 3、产生密文
    cyphertext = md5.hexdigest()
    print(cyphertext)

md5_encrypt2('jack',b'hahaadsd')
md5_encrypt2('jack')   #4ff9fc6e4e5d5f590c4f2134a8cc96d1
print('-----------------------------3 函数 不定参数')













