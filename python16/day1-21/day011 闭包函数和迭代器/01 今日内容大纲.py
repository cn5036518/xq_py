#!/usr/bin/env python
#-*- coding:utf-8 -*-

''''''
'''
一、上节内容回顾
001 函数
1、函数的定义
   函数：对功能或者动作的封装

2、函数的格式
    1、函数的申明：
        函数名(形参列表):
            函数体（return）
    2、函数的调用
        函数名(实参列表)

3、参数的定义和分类
    1、形参（形式参数）：函数申明中，函数名后面以及函数体中的变量
         1、位置参数
         2、默认值参数：默认值参数
         3、动态参数
            *args 接收多个位置参数，打包聚合成元组
            **kwargs 接收多个关键字参数，打包聚合成字典

         形参的顺序：
         1、位置参数
         2、动态的位置参数 *args 接收多个位置参数，打包聚合成元组
         3、默认值参数
         4、动态的关键字参数 **kwargs 接收多个关键字参数，打包聚合成字典

         一个星*在形参是聚合打包成元组
         一个星*在实参是把列表，元组等解构打散成多个位置参数
         二个星**在形参是聚合打包成字典
         二个星**在实现是将字典解构打散成多个关键字参数（元素-键值对）


    2、实参（实际参数）：函数调用中，函数名后面的变量
         1、位置参数
         2、关键字参数：关键字参数必须放在位置参数后面，否则报错
         3、组合参数

    3、传参：函数调用中，把实参赋值给形参的过程

4、函数的返回值
    1、函数申明中，不写retrun或者return后面空白，默认返回None
    2、return 值，返回一个值
    3、return 值1,值2,值3 返回多个值（元组）

002 名称空间和作用域
6、名称空间的分类和定义
    名称空间：存放变量名和变量值的对应关系的内存空间
    1、内置名称空间（命名空间）：python解释器提供的内置的东西，例如list、dict、tuple、print等
    2、全局名称空间：全局变量，函数申明
    3、局部名称空间：局部变量

    名称空间的加载顺序：内置名称空间>全局名称空间>局部名称空间
    名称空间的取值顺序：局部名称空间>全局名称空间>内置名称空间

7、作用域的分类和定义
    全局作用域：内置名称空间、全局名称空间-全局变量
    局部作用域：局部名称空间-局部变量

8、作用域的两个函数
    globals():输出全局作用域中的内容
    locals()：输出当前作用域中的内容
              注意：当前位置是全局的，就输出全局作用域中的内容
                    当前位置是局部的，就输出局部作用域中的内容

9、关于变量的两个关键字
    global:在局部作用域，函数中，把局部变量升级成全局变量，从而访问和修改全局变量
    nonlocal:在函数中，嵌套函数中，把当前局部变量升级成其父级局部变量，从而访问和修改器父级局部变量


二、作业讲解
三、今日主要内容
    1、函数名的应用
        1、函数名字可以作为参数进行传递
        2、函数名可以像变量一样进行多次赋值传递，通过print(函数名.__name__)查看原函数
        3、函数名表示函数的内存地址
        4、函数名（）表示函数的执行
        5、函数名和变量名的命名规范是一样的

        1、函数名可以作为参数进行传递
            def func1():
                print('我是一个单纯的函数')

            def func2(args)
                args()
                print('我是',args)

            func2(func1)  #实参是func1-函数名

        2、函数名可以作为返回值的例子：
            def outer():
                a =10
                def inner()
                    print(a)
                    return a
                return inner  #函数名作为返回值
            ret = outer()  #这里就是返回inner函数的内存地址
            ret() #就是inner函数的执行


        3、函数的代理设计模式例子：--函数名可以参数进行传递的例子
        def panpan():
            print('我是panan')

        def pingping():
            print('我是pingping')

        def ximen():
            print('我是大官人')

        def wangpo(male,female):  #核心业务逻辑（一直不变的，传不同的参数即可）
            male()
            female()

        wangpo(panpan,ximen)
        wangpo(pingping,ximen)

        4、函数的注释
           注释的好处：不看函数的代码，看完注释后，就大概知道这个函数的基本功能
           注释写成这样，才算合格
            def func1(args1,args2):
             """
             这里输入函数的功能--这个函数是用来做什么的
            :param args1:    函数参数的含义
            :param args2:
            :return:          函数返回值的含义

            """
                pass


    2、闭包
        1、闭包的概念：
            嵌套函数中，父级函数的变量，在子集函数中用到了（访问、修改、返回），那么这个变量就被保护起来了
            只有自己可以修改，父级函数()()就是闭包函数

        2、闭包的特点：
            1、常驻内存
            2、保护变量（只能自己修改，别人无法修改）

        3、闭包解决的问题：
            全局变量，别的同学也有可以修改，只需要在函数内存变量前加上global就可以修改全局变量
            全局变量： 优点是：常驻内存  缺点是：大家都可以修改-不安全
            局部变量： 优点是：只有自己可以访问和修改-安全  缺点：无法常驻内存，别的同学无法访问
            如何让一个变量既可以常驻内存，又只能自己才能修改呢，引入闭包函数

        4、闭包的写法：
            def outer():
                a = 10
                def inner():
                    print(a)
                    return a
                return inner
            ret = outer()  #返回的是inner函数的内存地址
            ret() #就是闭包函数

        5、闭包的应用
            1、爬虫
                爬取网页的时候，通过网络访问网页后，将网页爬取的内容存到变量中，下次直接分析变量
                比每次都访问网络，要更高效

            2、写法
                from urllib.request import urlopen
                def outer():
                    content = urlopen('https://www.baidu.com/').read()
                    def inner():
                        print(content)
                        return content
                    return inner
                ret = outer()  #这里返回的是inner函数的内存地址
                print(ret())  #这里就是content(被保护起来的变量，常驻内存，只能自己修改)
                #ret()是闭包函数

    3、迭代器-用
        1、迭代器的概念
            1、可迭代对象-iterable
                str、list、tuple、dict、set、open()、range()
            2、可迭代对象的概念：
                其数据类型的执行方法中含有__iter__方法的，就是可迭代对象
                li1 = [2,3,4]
                print('__iter__' in dir(li1))  #True 说明li1-列表是可迭代对象
            3、迭代器的概念--iterator
                可迭代对象调用__iter__（）方法后，生成的对象就是迭代器
                例如：it1 = li1.__iter__() #这里的it1就是迭代器
            4、迭代器中的方法__next__()
               迭代器每调用一次__next__（）方法，就取值一个元素，直到取值到最后一个元素后
               再次调用__next__()方法，会报错StopIteration

        2、迭代器的特点
            1、节约内存
            2、惰性（只有调用__next__()方法，才会取值一次）
            3、只能往前取值，不能后退

        3、迭代器的应用
            1、for循环的常规写法
               for循环的内部原理是通过迭代器实现的
                迭代器给所有的可迭代的数据类型提供了一种统一的遍历方式（可迭代协议）
                li1 = [2,3,4]
                for i in li1:
                    print(i)
                else:
                    print('循环结束了')

            2、通过迭代器实现for循环--一步步执行__next__()
                li1 = [2,3,4]
                it1 = li1.__iter__()  #it1就是生成可迭代对象-列表li1的迭代器-iterator
                print(it1.__next__()) #2
                print(it1.__next__()) #3
                print(it1.__next__()) #4
                # print(it1.__next__()) #报错 StopIteration

            3、通过迭代器实现for循环--通过while循环
                li1 = [2,3,4]
                it1 = li1.__iter__()  #it1就是生成可迭代对象-列表li1的迭代器-iterator
                while 1:
                    try:
                        print(it1.__iter__())
                    except StopIteration:
                        print("循环结束了")
                        break  #别忘记，这里是跳出整个while循环


'''













