#!/usr/bin/env python
#-*- coding:utf-8 -*-

#字典的删除
#一删除指定key  pop
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
#1 删除指定key，并将删除的value值获取到，存在另外一个变量
item1 = dic1.pop("吴承恩")
print(item1) #西游记
print(dic1) #{'曹雪芹': '红楼梦', '吴敬梓': '儒林外史', '施耐庵': '水浒传', '罗贯中': '三国演义'}

#2 删除的key不存在的情况，参数2不写，就报错
# item2 = dic1.pop("吴承恩2")
#KeyError: '吴承恩2'  如果key不存在，就报错

#3 删除的key不存在的情况，参数2写了，就返回参数2，存在另外一个变量
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
item3 = dic1.pop("吴承恩2","没有找到吴承恩2")
#如果参数1-key没有找到，就会返回参数2，把参数2的值存入变量中
#如果参数1-key没有找到，参数2没有写，就会报错
print(item3)  #没有找到吴承恩2  #范湖参数2
print(dic1)
#{'吴承恩': '西游记', '施耐庵': '水浒传', '曹雪芹': '红楼梦', '罗贯中': '三国演义', '吴敬梓': '儒林外史'}
print("------------pop 1")

# 二、随机删除一个键值对 popitem()--并且将已经删除的键值对存在一个变量--用的很少（随机不可控）
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
ret1 = dic1.popitem()
print(ret1) #('吴承恩', '西游记')
print(dic1) #{'施耐庵': '水浒传', '罗贯中': '三国演义', '曹雪芹': '红楼梦', '吴敬梓': '儒林外史'}
print("------------popitem 2")

#三、del 删除指定的key或者删除整个字典，回收内存空间
#1 删除指定的key
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
del dic1["罗贯中"]  #删除指定的key，从而删除指定键值对
print(dic1)  #{'曹雪芹': '红楼梦', '吴承恩': '西游记', '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
print("------------del 3-1")

#2 删除整个字典
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
# del dic1  #直接删除了字典，回收了内存空间
# print(dic1)  #NameError: name 'dic1' is not defined
print("------------del 3-2")

#四、清空字典
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
dic1.clear()  #清空字典，内存空间未释放
print(dic1)  #{}
print("------------clear 4")

"""
字典的删除总结，4种方法
1、pop(key,[value1]) 删除指定的key，并且返回已经删除的value--用的较多
    注意点：如果要删除的key，不存在，如果指定了参数2，则返回参数2
            如果要删除的key，不存在，且没有指定参数2，则报错
2、popitem()  没有参数，随机删除任意的key，并且返回已经删除的value--用的很少
3、del 删除指定的key或者删除整个字典（内存已经释放）
4、clear() 清空字典（内存还没有释放）--{}
"""






