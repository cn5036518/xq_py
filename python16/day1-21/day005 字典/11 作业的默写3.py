#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 过滤敏感字符代码的默写。
li = ["苍老师","东京热","武藤兰","波多野结衣"]
#如果用户的评论中出现上述元素，就用等数目的星号*代替

#方式1  输入哈哈苍老师  会出现['*****']  而不是["哈哈***"]
# content = input("请输入评论:") #输入的是字符串
# li1  = []
# for i in li:
#     if i in content:
#         content = content.replace(content,"*"*len(content))  #
# 注意点：这里是拿和content等数目的星号替换content，
# 结果是  输入哈哈苍老师  会出现['*****']  而不是["哈哈***"]   不是敏感词的也星号化了
#         #字符串的内置方法，不会修改字符串本身，所以必须重新赋值才行  关键点1
# li1.append(content)
# print(li1)  #输入哈哈苍老师  会出现['*****']  而不是["哈哈***"]

li = ["苍老师","东京热","武藤兰","波多野结衣"]
#方式2  输入哈哈苍老师  会出现['***']  而不是["哈哈***"]
# content = input("请输入评论:") #输入的是字符串
# li1  = []
# for i in li:
#     if i in content:
#         content = content.replace(content,"*"*len(i))  #
#         #注意点：这里是拿和i等数目的星号替换content，
#     # 结果是  输入哈哈苍老师  会出现['***']  而不是["哈哈***"]  #位数不对
#         #字符串的内置方法，不会修改字符串本身，所以必须重新赋值才行 关键点2
# li1.append(content)
# print(li1)  #输入哈哈苍老师  会出现['*****']  而不是["哈哈***"]

li = ["苍老师","东京热","武藤兰","波多野结衣"]
# #方式3  输入哈哈苍老师  会出现["哈哈***"]   推荐  正确
# content = input("请输入评论:") #输入的是字符串
# li1  = []
# for i in li:
#     if i in content:
#         content = content.replace(i,"*"*len(i))  #关键点3
#         #字符串的内置方法，不会修改字符串本身，所以必须重新赋值才行
# li1.append(content)
# print(li1)  #输入哈哈苍老师  会出现["哈哈***"]，而不是['*****'] 或者['***']

# li = ["苍老师","东京热","武藤兰","波多野结衣"]
#方式4  输入哈哈苍老师  会出现["哈哈***"]  加上循环输入  推荐2
li1 = []  #空列表必须写在for外循环外面，否则每次循环，都先置空  #注意点1
for i in range(10): #限定10次输入机会  while 1就是不限制次数
    # li1 = [] #空列表必须写在for外循环外面，否则每次循环，都先置空  #注意点1
    content = input("请输入评论,输入q退出：") #输入的是字符串
    if content.upper() == "Q":
        break #退出当层循环，外循环
    for i in li: #1遍历列表
        if i in content: #2判断列表的元素是否在输入内容中
            content = content.replace(i,"*"*len(i))  #关键点3
            #字符串的内置方法，不会修改字符串本身，所以必须重新赋值才行
            #注意点2  这里只用和i等数目的星号替换i即可（而不是用和content等数目的星号替换content--不是敏感词的也星号代替了，或者
            #拿和i等数目的星号替换content--位数不对）
    li1.append(content)  #必须在for循环外面追加元素到列表  #注意点3
    #否则会出现列表中出现4个一样的重复元素
print(li1)  #输入哈哈苍老师  会出现["哈哈***"]，而不是['*****'] 或者['***']












