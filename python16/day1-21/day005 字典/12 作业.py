#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 1，有如下变量（tu是个元祖），请实现要求的功能
#
tu = ("alex", [11, 22, {"k1": 'v1', "k2": ["age", "name"], "k3": (11,22,33)}, 44])
#     a. 讲述元组的特性
#       可读列表，由()表示 ，第一层元素不可修改，第二层元素根据元素类型判断是否可修改
#       第二层是元组，则不可修改；第二层是列表，则列表的元素可以修改，但是不可替换列表本身

#     b. 请问tu变量中的第一个元素 "alex" 是否可被修改？
        # 可以

#     c. 请问tu变量中的"k2"对应的值是什么类型？是否可以被修改？如果可以，请在其中添加一个元素 "Seven"
      #列表，可以修改
tu = ("alex", [11, 22, {"k1": 'v1', "k2": ["age", "name"], "k3": (11, 22, 33)}, 44])
tu[1][2]["k2"].append("Seven")  #注意点：tu[1]而不是tu(1)  索引取值是中括号而不是小括号()
print(tu)  #('alex', [11, 22, {'k3': (11, 22, 33),
# 'k2': ['age', 'name', 'Seven'], 'k1': 'v1'}, 44])

# d. 请问tu变量中的"k3"对应的值是什么类型？是否可以被修改？如果可以，请在其中添加一个元素 "Seven"
tu = ("alex", [11, 22, {"k1": 'v1', "k2": ["age", "name"], "k3": (11,22,33)}, 44])
#元组 不可修改

# 2， 字典dic,dic = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
#
# a. 请循环输出所有的key
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
for i in dic1.keys():
    print(i,end=" ")  #换行改成空格
print("-----------------2-1")

# b. 请循环输出所有的value
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
for i in dic1.values():
    print(i,end=" ")
print("-----------------2-2")

#  	c. 请循环输出所有的key和value
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
for k,v in dic1.items():
    print(k,v) #默认分隔符sep是空格，默认end是换行
print("-----------------2-3")

# d. 请在字典中添加一个键值对，"k4": "v4"，输出添加后的字典--新增
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
dic1["k4"] = "v4"  #添加键值对  key之前没有就是新增
print(dic1) #{'k2': 'v2', 'k3': [11, 22, 33], 'k1': 'v1', 'k4': 'v4'}
print("-----------------2-4")

# e. 请在修改字典中 "k1" 对应的值为 "alex"，输出修改后的字典--修改
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
dic1["k1"] = "alex" #修改指定的key key之前有就是修改
print(dic1) #{'k1': 'alex', 'k2': 'v2', 'k3': [11, 22, 33]}
print("-----------------2-5")

# f. 请在k3对应的值中追加一个元素 44，输出修改后的字典
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
dic1["k3"].append(44) #获取到key-k3的value值 dic1["k3"]是一个列表，追加元素即可append
print(dic1)  #{'k1': 'v1', 'k2': 'v2', 'k3': [11, 22, 33, 44]}
print("-----------------2-6")

# g. 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典
dic1 = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
dic1["k3"].insert(0,18)  # 获取到key-k3的value值 dic1["k3"]是一个列表，指定位置插入元素即可insert
print(dic1)  #{'k3': [18, 11, 22, 33], 'k2': 'v2', 'k1': 'v1'}
print("-----------------2-7")

# 题目3
av_catalog = {
    "欧美":{
        "www.youporn.com": ["很多免费的,世界最大的","质量一般"],
        "www.pornhub.com": ["很多免费的,也很大","质量比yourporn高点"],
        "letmedothistoyou.com": ["多是自拍,高质量图片很多","资源不多,更新慢"],
        "x-art.com":["质量很高,真的很高","全部收费,屌丝请绕过"]
    },
    "日韩":{
        "tokyo-hot":["质量怎样不清楚,个人已经不喜欢日韩范了","verygood"]
    },
    "大陆":{
        "1024":["全部免费,真好,好人一生平安","服务器在国外,慢"]
    }
}
#     a,给此 ["很多免费的,世界最大的","质量一般"]列表第二个位置插入一个  元素：'量很大'。
av_catalog["欧美"]["www.youporn.com"].insert(1,"量很大")
print(av_catalog)

#     b,将此 ["质量很高,真的很高","全部收费,屌丝请绕过"]列表的 "全部收费,屌丝请绕过" 删除。
av_catalog["欧美"]["x-art.com"].remove("全部收费,屌丝请绕过")
print(av_catalog)

#     c,在此 ["质量很高,真的很高","全部收费,屌丝请绕过"]列表中添加"金老板最喜欢这个"。
av_catalog["欧美"]["x-art.com"].append("金老板最喜欢这个")
print(av_catalog)

#     d,将此["质量怎样不清楚,个人已经不喜欢日韩范了","verygood"]列表的 "verygood"全部变成大写。
av_catalog["日韩"]["tokyo-hot"][1] = av_catalog["日韩"]["tokyo-hot"][1].upper()
#字符串的方法，不会对字符串本身有修改，所以必须重新赋值才行
print(av_catalog)
print("---------------3-4")

# e,给'大陆' 对应的字典添加一个键值对 '1048' :['一天就封了']
av_catalog["大陆"]["1048"] = ['一天就封了']
print(av_catalog)

# f,删除此"letmedothistoyou.com": ["多是自拍,高质量图片很多","资源不多,更新慢"]键值对。
av_catalog["欧美"].pop("letmedothistoyou.com")
print(av_catalog)

# g,给此["全部免费,真好,好人一生平安","服务器在国外,慢"]列表的第一个元素，加上一句话：'可以爬下来'
av_catalog["大陆"]["1024"] [0] = av_catalog["大陆"]["1024"] [0]+",可以爬下来"  #这里[0]前面的空格是允许的，不会有语法错误
# av_catalog["大陆"]["1024"][0] = av_catalog["大陆"]["1024"][0]+",可以爬下来"
print(av_catalog)

# 5、元素分类
# 有如下值li= [11,22,33,44,55,66,77,88,99,90]，
# 将所有大于 66 的值保存至字典的第一个key中，
# 将小于 66 的值保存至第二个key的值中。
# 即： {'k1': 大于66的所有值列表, 'k2': 小于66的所有值列表}
#方法1  #好理解
li= [11,22,33,44,55,66,77,88,99,90]
li1 = [] #用于追加大于66的数
li2 = [] #用于追加小于66的数
dic1 = {}

for i in li:
    if i>66:
        li1.append(i)
    elif i<66:
        li2.append(i)
print(li1) #[77, 88, 99, 90]
print(li2) #[11, 22, 33, 44, 55]

dic1["k1"] = li1
dic1["k2"] = li2
print(dic1)  #{'k2': [11, 22, 33, 44, 55], 'k1': [77, 88, 99, 90]}
print("--------------5-1")

#方法2
li= [11,22,33,44,55,66,77,88,99,90]
dic2 = {'k1': [], 'k2': []} #先建立字典雏形，然后往空列表添加数 #关键点1
for i in li:
    if i>66:
        dic2["k1"].append(i) #这里用key来取出字典的value
    else:
        dic2["k2"].append(i)
print(dic2)  #{'k2': [11, 22, 33, 44, 55, 66], 'k1': [77, 88, 99, 90]}
print("--------------5-2")

# 方法3  setdefault方法   #主要是练习setdefault的新增（key已经存在，就不操作-不覆盖），  重点掌握2
#                             以及setdefault的返回value这个特点
li = [11, 22, 33, 44, 55, 66, 77, 88, 99, 90]
dic1 = {}
for i in li:
    if i > 66:
        #关键点1：第一次循环，setdefault的k1:[]已经添加到了空字典
                 # 第二次循环,setdefault的k1:[]就不执行了，因为key存在了，就不操作（不覆盖）
        #关键点2：setdefault除了新增之外，还有将value返回的功能
        # 第一次循环，setdefault的k1:[]添加到了空字典的同时，会返回[]
        ret1 = dic1.setdefault("k1",[])  #关键点1
        ret1.append(i)  #关键点2
        #第一次循环，ret1取值是[],append后是[77]
        #第二次循环，ret1取值是[77],（这里setdefault的k1已经存在，就不操作-不覆盖，还是返回[77]）
        # append后是[77,88]
        #依次类推
    else:
        ret2 = dic1.setdefault("k2", [])
        ret2.append(i)
        # 第一次循环，ret2取值是[],append后是[11]
        # 第二次循环，ret2取值是[11],（这里setdefault的k2已经存在，就不操作-不覆盖，还是返回[11]）
        # append后是[11,22]
        # 依次类推
print(dic1)  #{'k2': [11, 22, 33, 44, 55, 66], 'k1': [77, 88, 99, 90]}
print("--------------5-3")

# 方法4  字典的get方法  练习字典的get方法  重点掌握1
li = [11, 22, 33, 44, 55, 66, 77, 88, 99, 90]
dic1 = {}
for i in li:
    if i > 66:
        if dic1.get("k1") == None:  #如果k1不存在，则洗澡能键值对   #关键点1
            dic1["k1"] = [i]  #新增键值对,注意点：value必须是列表[i] 而不是i   #关键点2
        else: #如果k1存在，则追加
            dic1["k1"].append(i) #往value--列表中追加一个元素     ##关键点3
    else:
        if dic1.get("k2") == None:  # 如果k1不存在，则洗澡能键值对
            dic1["k2"] = [i]  # 新增键值对,注意点：value必须是列表[i] 而不是i
        else:  # 如果k1存在，则追加
            dic1["k2"].append(i)  # 往value--列表中追加一个元素
print(dic1)  #{'k2': [11, 22, 33, 44, 55, 66], 'k1': [77, 88, 99, 90]}
print("--------------5-4")

"""
字典的get方法和setdefault方法的具体应用总结--ok
1、上面方法4--get方法就是把方法3--setdefault分拆之后的实现

"""

# 4、有字符串 "k:1|k1:2|k2:3|k3:4" 处理成字典 {'k':1,'k1':2....}  (升级题)
s1 = "k:1|k1:2|k2:3|k3:4"
# dic1 = {'k':1,'k1':2}

li1 = s1.split("|")  #分隔符"|"拆分字符串，返回列表
print(li1)  #['k:1', 'k1:2', 'k2:3', 'k3:4']

dic11 = {}  #定义空字典，用于往空字典添加键值对  #注意点：空字典必须放到for循环外面，而不能是for循环里面，否则每次都会清空字典
for i in li1:  #1 循环遍历列表
    k1,v1 = i.split(":")  #2 将列表的每一个元素-字符串用冒号拆分后，解包分别存在2个变量k1 v1
    # #注意点2：用2个变量接收列表的2个元素
    # print(k1,v1)
    dic11[k1] = v1  #3 将k1 v1分别作为key和value 添加到空列表   #关键点 必须理解字典的定义，键值对添加方式
print(dic11)  #{'k1': '2', 'k3': '4', 'k2': '3', 'k': '1'}
print("--------------4-1")


# 6、输出商品列表，用户输入序号，显示用户选中的商品(升级题)
#
# 商品列表：
goods = [{"name": "电脑", "price": 1999},  #列表
 {"name": "鼠标", "price": 10},
 {"name": "游艇", "price": 20},
 {"name": "美女", "price": 998}, ]
#
# 要求:
# 1：页面显示 序号 + 商品名称 + 商品价格，如：
#       		1 电脑 1999
# 	   		2 鼠标 10
#      		…
# 2：用户输入选择的商品序号，然后打印商品名称及商品价格
# 3：如果用户输入的商品序号有误，则提示输入有误，并重新输入。
# 4：用户输入Q或者q，退出程序。
# for i in range(len(goods)):   #0-3 4次，i是索引号  goods[i]就是每个元素   通过索引号取值（显示序号必须通过索引号取值）
#     #1遍历列表，得到每个元素-字典类型
#     for j in goods[i].values(): #2遍历循环每个字典，获取key 和 value
#         print(i+1,j,end=" ")
#     print()  #换行
# print("--------------6-1")

dic1 = {}  #空字典
for i in range(len(goods)): #i是索引号，goods[i]是根据索引号取元素
    dic1[str(i+1)] = goods[i]   #把列表的元素作为value，索引号作为key，添加键值对到空字典  #关键点1-重点--这个思想很重要
    #关键点是给列表的每个元素作为value，加上序号-key后，形成键值对，存入到空字典；最后字典保存了全部信息，只需要遍历打印即可
    #注意点2  key用字符串而不是数字，是为了后面客户输入是字符串，就不需要转换了
print(dic1) #{1: {'name': '电脑', 'price': 1999}, 2: {'name': '鼠标', 'price': 10},
# 3: {'name': '游艇', 'price': 20}, 4: {'name': '美女', 'price': 998}}

for i in dic1: #遍历字典取值（和yil的打印文件名称 文件大小 文件绝对路径很类似）
    #把文件大小作为key，文件名称和文件绝对路径整体看做元组("文件名称","文件绝对路径")-作为value，依次添加到空字典
    #也可以把文件大小作为key，文件名称和文件绝对路径整体看做字典 {"文件名称":文件名称,"文件绝对路径":文件绝对路径}
    # -作为value，依次添加到空字典dic1---数据都保存到了dic1，循环打印即可
    print(i,dic1[i]["name"],dic1[i]["price"])   #关键点2  key--i不同，value不同
    #i是序号
    #dic1[i]["name"] 是根据序号，取名字
    #dic1[i]["price"]是根据序号，取价格
print("--------------6-1")

#题目12 方法1
# for j in range(10):  #限定输入10次  0-9
#     content = input("请输入商品序号:")  #输入的是字符串，转换成数字
#     if str(content).upper() == "Q":
#         break   #退出外循环
#     for i in dic1:
#         if content == i:  #注意点1 这里必须是== 而不能是i
#             print(dic1[content]["name"],dic1[content]["price"])
#         else:
#             print("输入有误，并重新输入")
#             break  #退出当层循环-内循环
# # print("--------------6-2")


"""
题目6总结
goods = [{"name": "电脑", "price": 1999},  #列表
 {"name": "鼠标", "price": 10},
 {"name": "游艇", "price": 20},
 {"name": "美女", "price": 998}, ]
 对于根据序号，打印商品名字和商品价格

 分析过程：
 1 序号是索引号,取索引号必须是 range(len(goods))才行，而不是直接遍历列表（这里取不到索引号）
 2 如果能把列表的每个元素作为value，然后索引号作为key，添加键值对到空列表dic1
   那么dic1就存储了所有数据，循环遍历dic1打印即可

价值观：长期定向的思考，必然带来的是穿透现象看到本质
刻意练习重复
熟能生巧
"""

goods = [{"name": "电脑", "price": 1999},  #列表
 {"name": "鼠标", "price": 10},
 {"name": "游艇", "price": 20},
 {"name": "美女", "price": 998}, ]

dic1 = {}
for i in range(len(goods)):  #取索引号，必须是range(len(列表名))，而不能是直接遍历列表（无法取出索引号）
    dic1[str(i+1)] = goods[i]  #关键就是这里 关键点：添加键值对到空字典
    #目的：给列表的每一个元素，添加一个序号
    #做法：把列表的每一个元素作为value，序号作为key，依次添加到空字典即可
print(dic1)  #有了这个，就好遍历循环取值了
#{1: {'name': '电脑', 'price': 1999}, 2: {'name': '鼠标', 'price': 10},
#  3: {'name': '游艇', 'price': 20}, 4: {'name': '美女', 'price': 998}}

#题目2 方法2  推荐
# 2：用户输入选择的商品序号，然后打印商品名称及商品价格
# 3：如果用户输入的商品序号有误，则提示输入有误，并重新输入。
# 4：用户输入Q或者q，退出程序。
goods = [{"name": "电脑", "price": 1999},  #列表
 {"name": "鼠标", "price": 10},
 {"name": "游艇", "price": 20},
 {"name": "美女", "price": 998}, ]

# index1 = int(input("请输入商品编号:"))-1 #输入的是字符串，需要转换成int(因为索引号+1 就是商品编号，加法要用int)
# #索引号和商品编号的关系  --关键点1   索引号+1 = 商品编号
# print(goods[index1]["name"], goods[index1]["price"])

#6 题目3和题目4 方法2  推荐
# 2：用户输入选择的商品序号，然后打印商品名称及商品价格
# 3：如果用户输入的商品序号有误，则提示输入有误，并重新输入。
# 4：用户输入Q或者q，退出程序。

print("-----------题目3")
for i in range(10): #0-9  限定输入10次
    content = input("请输入商品编号:") #输入的是字符串,需要把字符串转换成int
    #如何判断合法：1判断是否是数字，2限定数字的范围
    if content.upper() == "Q": #如果用户输入的是q或者Q ，就退出当层for循环
        print("退出程序")
        break #退出当层循环
    if content.isdigit():#1 先判断用户输入的是否是数字--字符串类型的数字,比如："1"
        content = int(content)  #拼写错误，是int 而不是input 注意点1   #2将字符串类型的数字转换成int
        if content>0 and content <=len(goods):  #3判断输入的数字是否在1-4之间
            print(goods[content-1]["name"], goods[content-1]["price"]) #4 如果在 1-4之间，
            #根据列表索引号+1 = 商品编号   通过索引号列出列表的元素，打印商品名称和价格
        else:  #5输入的数字不在1-4之间，提示
            print("没有对应序号的商品，请重新输入商品编号")
    else:  #2 用户输入的如果不是数字，提示
        print("输入有误，并重新输入数字")

    # if content.upper() == "Q":
    #     print("退出程序")
    #     break




