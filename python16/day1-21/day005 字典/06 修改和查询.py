#!/usr/bin/env python
#-*- coding:utf-8 -*-

#字典的修改和查询
#一、修改--修改字典的单个key
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
#方法1  #修改字典中单个key对应的value值
dic1["吴承恩"]= "西游记2"  #给指定的key赋予新的value
print(dic1)
#{'吴敬梓': '儒林外史', '施耐庵': '水浒传', '罗贯中': '三国演义', '曹雪芹': '红楼梦', '吴承恩': '西游记2'}

#方法2  #合并字典2到字典1  update()
dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
dic2 = {"金庸":"笑傲江湖","古龙":"小李飞刀"}
dic1.update(dic2)  #把字典2的键值对合并到字典1  key不同就是新增
print(dic1)
#{'罗贯中': '三国演义', '曹雪芹': '红楼梦',
# '吴敬梓': '儒林外史', '古龙': '小李飞刀', '金庸': '笑傲江湖', '吴承恩': '西游记', '施耐庵': '水浒传'}

dic1 = {'吴承恩': '西游记', '罗贯中': '三国演义', '曹雪芹': "红楼梦", '吴敬梓': '儒林外史', '施耐庵': '水浒传'}
dic2 = {"吴承恩":"西游记2","古龙":"小李飞刀"}
dic1.update(dic2)  #把字典2的键值对合并到字典1 如果有相同的key，则字典2的key对应的value会覆盖字典1的key
#key相同，就是替换；key不同，就是新增
print(dic1)
#{'施耐庵': '水浒传', '罗贯中': '三国演义', '吴承恩': '西游记2',
# '曹雪芹': '红楼梦', '吴敬梓': '儒林外史', '古龙': '小李飞刀'}
print("----------------修改1")

"""
总结：
dic1.update(dic2)
1、字典2和字典1的key完全不相同，就是把字典2的键值对添加到字典1中--合并，新增键值对
2、字典2和字典1的key有相同的，对于相同的key，则用字典2的value替换字典1的value--替换相同key对于的value
    对于不同的key，就是新增
"""

#查询
dic1 = {"金庸":"笑傲江湖","古龙":"小李飞刀"}
#方法1  直接用key-最直观
print(dic1["金庸"])  #笑傲江湖  #根据key获取value值
print("----------------查询2-1")
# print(dic1["金庸1"])  #如果key不存在，报错  KeyError: '金庸1'

#方法2  get--健壮性更好  key不存在默认返回None或者返回参数2（可以指定）
print(dic1.get("古龙"))  #小李飞刀 参数1是key，根据key获取value值
print(dic1.get("古龙","古龙在这里"))  #小李飞刀 参数1是key，根据key获取value值，这里获取到了，就忽略参数2
print(dic1.get("卧龙生"))  #None  参数1是key，如果key不存在，则返回参数2，参数2默认是None
print(dic1.get("卧龙生","卧龙生不在这里"))
#卧龙生不在这里  参数1是key，如果key不存在，则返回参数2
print("----------------查询2-2 get")

#方法3 setdefault  --除了新增键值对，还是返回key对应的value的功能--查询和新增都有
dic1 = {"金庸":"笑傲江湖","古龙":"小李飞刀"}
value0 = dic1.setdefault("金庸","倚天屠龙记")  #参数1是key 参数2是value 这里参数1 key已经存在，则不执行新增
print(value0)  #笑傲江湖  #注意：这里虽然没有执行新增键值对，但是根据key-金庸，还是取出了value-笑傲江湖
#而不是取出“倚天屠龙记”，因为倚天屠龙记还没有添加进去
print(dic1)  #{'金庸': '笑傲江湖', '古龙': '小李飞刀'}

value1 = dic1.setdefault("卧龙生","金剑雕翎")  #除了新增键值对之外，还可以把value返回（类似pop的获取）
print(value1)  #金剑雕翎
print(dic1) #{'古龙': '小李飞刀', '卧龙生': '金剑雕翎', '金庸': '笑傲江湖'}
print("----------------查询2-3 setdefault()")

"""
字典的查询总结：
1、dic1[key]来查询value，好处是直观
   缺点是：如果key不存在，会报错，健壮性不够
2、dic1.get(key,[提示])
    好处是：如果key不存在，则默认返回None，不会报错，健壮性更好
            如果key不存在，也可以返回指定的参数2
            如果key存在，就返回对应的value值
3、dic1.setdefault(key,value)
    1、如果key已经存在了，则不执行新增
        key对应的value也保存在另外一个变量，返回--注意点
    2、如果key不存在，则执行新增键值对
        且把新增的key对应的value存在另外一个变量，返回--类似pop的获取
"""









