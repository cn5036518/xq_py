#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 9，写函数,接收一个参数(此参数类型必须是可迭代对象),将可迭代对象的每个元素以’_’相连接,形成新的字符串,并返回.
# 例如 传入的可迭代对象为[1,'老男孩','武sir']返回的结果为’1_老男孩_武sir’ ----这个题的解法需要重点掌握

#方法1  拼接字符串-累计拼接  算法
def func1(*args): #形参1个星号* 表示将多个位置参数聚合打包成元组
    print(args)  #(1, '老男孩', '武sir')
    s = ''  #字符串的累计拼接，初始值是空字符串；数字的累计加和-累加，初始值是0
    for i in args:
        s += (str(i)+'_')
    print(s)  #1_老男孩_武sir_
    s = s[:-1]  #去掉最后一位
    return s #1_老男孩_武sir

li1 = [1,'老男孩','武sir']  #这里1是数字，无法直接通过join函数拼接
ret1 = func1(*li1)  #实参有1个星号，表示将列表打算成多个位置参数
print(ret1)  #1_老男孩_武sir
print('--------------------------1')

#方法2  先把[1,'老男孩','武sir']转成['1','老男孩','武sir']，然后join   根据索引号遍历
def func2(li1):
    for i in range(len(li1)):  #0,1,2
        li1[i] = str(li1[i])  #等号右边，将列表的每一个元素取出来后，转换成字符串  #这个写法 关键点 必须掌握
        #通过索引号取值，修改列表的元素
        '''
        li1[0] = '1'
        li1[1] = '老男孩'
        li1[2] = '武sir'
        '''
    print(li1)  #['1', '老男孩', '武sir']
    s = "_".join(li1)  #这里的'1'已经是字符串了，可以拼接了，如果1还是数字，就无法join拼接了
    # print(s) 1_老男孩_武sir
    return s  #1_老男孩_武sir

li2 = [1,'老男孩','武sir']
ret2 = func2(li2)  #实参，不加*，就是不把列表打算成多个位置参数，而是把列表作为整体传入
print(ret2) #1_老男孩_武sir
print('--------------------------2')

#方法3  先把[1,'老男孩','武sir']转成['1','老男孩','武sir']，然后join   循环老列表，修改元素后，添加到新列表
def func3(li1):
    li2 = []
    for i in li1:  #1循环遍历列表1，将列表1的元素转成字符串后，添加到列表2
        li2.append(str(i))
    print(li2)  #['1', '老男孩', '武sir']
    s = '_'.join(li2) #这里的'1'已经是字符串了，可以拼接了，如果1还是数字，就无法join拼接了
    # print(s)  #1_老男孩_武sir
    return s  #1_老男孩_武sir

li3 = [1,'老男孩','武sir']
ret3 = func3(li3)  #实参，不加*，就是不把列表打算成多个位置参数，而是把列表作为整体传入
print(ret3) #1_老男孩_武sir
print('--------------------------3')

'''
思路和关键点梳理

方法1
1、涉及算法，因为join无法直接拼接字符串和数字，不使用join函数
    实参1个星：把列表的元素作为多个位置参数传入
    形参1个星：把多个位置参数聚合打包成元组
    s = ''  #字符串的累计拼接，初始值是空字符串；数字的累计加和-累加，初始值是0
    for i in args:
        s += (str(i)+'_')

方法2
2、通过索引号取值--range(len(li1))，修改列表的元素，从而修改列表本身
    然后使用join函数

方法3
3、循环遍历列表本身，不通过索引号取值，将列表1的每个元素转换成字符串后，依次添加到列表2
    然后使用join函数
'''









