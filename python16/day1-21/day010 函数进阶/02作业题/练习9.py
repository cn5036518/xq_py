#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 9，写函数,接收一个参数(此参数类型必须是可迭代对象),将可迭代对象的每个元素以’_’相连接,形成新的字符串,并返回.
# 例如 传入的可迭代对象为[1,'老男孩','武sir']返回的结果为’1_老男孩_武sir’

#方法1
def func(*args): #形参的*args 将多个位置参数聚合打包成元组
    print(args)  #('jack', 'tom', 'bob')
    join1 = '_'.join(args)  #jack_tom_bob  #通过连接符号'_'将元组的每个元素进行连接，形成一个大字符串
    # print(ret)
    # print(type(ret))
    return join1
li1 = ['jack','tom','bob']
ret = func(*li1)  #实参的*args 把可迭代类型-列表进行解包打散，成多个位置参数
print(ret)
print('-------------1')

#方法2 老师的思路  这里1是数字，'老男孩'是字符串，无法拼接，所有不能直接用join函数
def func2(*args): #形参的*args 将多个位置参数聚合打包成元组
    print(args)  #(1,'老男孩','武sir')
    join1 = '_'.join(args)  #jack_tom_bob  #通过连接符号'_'将元组的每个元素进行连接，形成一个大字符串
    #报错，TypeError: sequence item 0: expected str instance, int found
    # 数字和字符串无法进行拼接
    # print(ret)
    # print(type(ret))
    return join1
li2 = [1,'老男孩','武sir']
# ret2 = func2(*li2)  #实参的*args 把可迭代类型-列表进行解包打散，成多个位置参数
# print(ret2)

#方法3 不能用join函数，用算法(思路，循环遍历元组中每一个元素，累计拼接即可)   重点掌握
def func3(*args): #形参的*args 将多个位置参数聚合打包成元组
    print(args)  #(1,'老男孩','武sir')
    s1 = ''  #字符串累计拼接，初始是空字符串（数字累计加和-累加，初始值是0）
    for i in args:  #1 遍历元组的元素
        # s1 += str(i)+'_' #空白字符串，累计拼接（1是数字，拼接前，先把数字转换成str）
        s1 += (str(i)+'_') #空白字符串，累计拼接（1是数字，拼接前，先把数字转换成str）
        #注意点：每个元素后面拼接一个'_';
                # 需要小括号，从而调整优先级
    s1 = s1[:-1] #1_老男孩_武sir_   #去掉最后的一个字符
    print(s1)   #1_老男孩_武sir
    return s1

li3 = [1,'老男孩','武sir']
ret3 = func3(*li2)  #实参的*args 把可迭代类型-列表进行解包打散，成多个位置参数
print(ret3)  #1_老男孩_武sir
print('-------------------------3')

#方法4
def func4(li): #形参是列表
    print(li)  #[2, '老男孩', '武sir']
    for i in range(len(li)):  #0,1,2  #通过索引号，循环列表，可以通过索引修改列表本身的元素，从而修改列表本身
        li[i] = str(li[i])  #这里li是列表,列表根据索引号取值-取出每个元素的值后，
        # 将每个元素转换成字符串--比如：int2转换成了字符串2
        #上述for循环将列表的元素做了修改 从[2, '老男孩', '武sir']变成了['2', '老男孩', '武sir']
    '''
    思路分析：
    1、遍历循环列表的每一个元素--通过索引号取值  range(len(li))
    2、将每个元素转成字符串
    3、将每个元素依次添加到原列表--实现了修改列表本身
    '''
    # print(li)  #['2', '老男孩', '武sir']
    li2 = '_'.join(li)  #通过'_'作为连接符，将列表的每个元素拼接成一个大字符串
    # print(li2)  #2_老男孩_武sir
    return li2

li4 = [2,'老男孩','武sir']
ret4 = func4(li4)  #实参是列表，没有加星号，就没有将列表打散成多个位置参数，而是将列表作为整体传入
print(ret4)  ##2_老男孩_武sir
print('-------------------------4')

#方法5
def func4(li): #形参是列表
    print(li)  #[2, '老男孩', '武sir']
    li2 =[]
    for i in li:  #0,1,2   #循环列表本身，无法修改列表，但是可以把修改后的元素添加到新的列表
        li2.append(str(i))
    '''
    思路分析：
    1、遍历循环列表的每一个元素--循环列表本身，而不是通过索引号取值  range(len(li))
    2、将每个元素转成字符串
    3、将每个元素依次添加到新的空列表
    '''
    # print(li2)  #['2', '老男孩', '武sir']
    li3 = '_'.join(li2)  #通过'_'作为连接符，将列表的每个元素拼接成一个大字符串
    # print(li3)  #2_老男孩_武sir
    return li3

li5 = [2,'老男孩','武sir']
ret5 = func4(li5)  #实参是列表，没有加星号，就没有将列表打散成多个位置参数，而是将列表作为整体传入
print(ret5)  ##2_老男孩_武sir
print('-------------------------5')








