#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 5,写函数,传入函数中多个实参(均为可迭代对象如字符串-str,列表-list,元组-tuple,集合-set等),
# 将每个实参的每个元素依次添加到函数的动态参数args里面.
# 例如 传入函数两个参数[1,2,3] (22,33)最终args为(1,2,3,22,33)

#方法1
def func(*args): #形参的一个星*，将多个位置参数聚合打包成元组
    print(args)  #(1, 2, 3, 22, 33)
li1 = [1,2,3]
tu1 = (22,33)
li2 = list(tu1)  #元组转换成列表
li1.extend(li2)  #把li2中的元素合并到li1中
print(li1)  #[1, 2, 3, 22, 33]
func(*li1)  #(1, 2, 3, 22, 33)   #实参的一个星，将列表解构打散成多个位置参数
print('---------------1')

#方法2 老师思路
def func2(*args):
    print(args)

li2 = [1,2,3]
tu2 = (22,33)
# func2(*li2,*tu2)  #版本：这个写法，如果python的版本低于3.5，就不允许这么写，目前的版本是3.3
# 但是3.5及以上版本就允许这么写了

#方法3 算法-实参不用一个星* 通过循环遍历来实现
def func3(*args): #形参的1个星*，把多个位置参数聚合打包成一个元组
    # print(args)  #([1, 2, 3], (22, 33))
    li4 = []
    for i in args:  #外面的for循环，将元组内的元组-2个列表遍历了
        for j in i: #内部的for循环，将列表的元素遍历了
            li4.append(j)
    print(li4)  #[1, 2, 3, 22, 33]

li3 = [1,2,3]
tu3 = (22,33)
func3(li3,tu3)  #([1, 2, 3], (22, 33))









