#!/usr/bin/env python
#-*- coding:utf-8 -*-

#1 函数的互相调用
def func1():
    print('我是1')  #2

def func2():
    print('我是2')   #1
    func1()

def func3():
    func2()
    print('我是3')  #3

func3()
# 我是2
# 我是1
# 我是3
#上述3个函数不是嵌套，是互相调用
print('-----------------1 函数互相调用')

#2函数的嵌套
def outer():
    def inner():  #注意点：这里只是定义，而没有调用-执行
        print('我是内部')
    print('我是外部')
outer()
# 我是外部
print('-----------------2-1 函数的嵌套')

def outer2():
    def inner():
        print('我是内部')
    print('我是外部')
    inner()
outer2()
# 我是外部
# 我是内部
print('-----------------2-2 函数的嵌套')

#3变量的作用域
a = 10  #全局变量
def func():
    a = 20 #局部变量
    print(a) #打印局部变量
print(a)  #10 #打印全局变量
func() #20  #打印局部变量 10
print(a)   #10  #打印全局变量  注意点这里打印的是全局变量10，而不是局部变量20（因为函数调用完毕后，局部变量就回收了）
# 10
# 20
# 10
print('-----------------3-1 变量的作用域')

a = 10  #全局变量
def func2():
    # a = 20 #局部变量
    print(a) #优先打印局部变量，没有局部变量，就打印全局变量  10
    #注意点：这里的a只能读取全局变量，而不能修改全局变量，如何能让函数内部修改全局变量呢？看下面3-3
# 加载顺序：内置、全局、局部（函数被执行的时候）
# 取值顺序：局部、全局、内置    --注意点
print(a)  #10 #打印全局变量
func2() #10  #优先打印局部变量，没有局部变量，就打印全局变量  10
print(a)   #10  #打印全局变量  注意点这里打印的是全局变量10，而不是局部变量（因为函数调用完毕后，局部变量就回收了）
# 10
# 10
# 10
print('-----------------3-2 变量的作用域，函数内读取全局变量')

a = 10  #全局变量
def func3():
    global a #把局部变量a升级为全局变量a  （从函数内部修改了全局变量--谨慎使用--共享）
    #实际使用：对于全局变量，尽量是只去读取它，而不修改它
    a = 20  #修改全局变量a从10到20
    print(a) #20
print(a)  #10 #打印全局变量--修改前的
func3() #20  #打印函数内的变量a--这个a是全局变量-修改后的
print(a)   #20  打印全局变量--修改后的
# 10
# 20
# 20
print('-----------------3-3 变量的作用域，函数内修改全局变量')

def outer3():
    a = 10
    def inner():
        a = 20
        print(a)
    print(a)  #10  #这里是局部作用域1中的a
    inner()  #20   #这里是局部作用域2中的a（虽然局部作用域2属于局部作用域1，但是是不同的作用域）
    print(a) #10   #这里还是局部作用域1中的a，因为inner（）函数调用完毕后，局部作用域2就回收了，不存在了
outer3()
# 10
# 20
# 10
print('-----------------4-1 函数的嵌套')

def outer4():
    a = 10
    def inner():
        nonlocal a  #nonlocal关键字是：局部当中，往外找离它最近的这个变量，拖进来，进行修改或者访问
        a = 20 #把outer4下的变量a进行修改-重新赋值（注意点：outer4下的变量a已经变成了20）
        print(a)  #20
    print(a)  #10  #这里是局部作用域1中的a
    inner()  #20   #这里是局部作用域2中的a（虽然局部作用域2属于局部作用域1，但是是不同的作用域）
                   #局部作用域2用了关键字nonlocal，把局部作用域1的变量进行了修改
                   #局部作用域1和局部作用域2中的变量会同步修改
    print(a) #20   #这里还是局部作用域1中的a，因为inner（）函数调用完毕后，局部作用域2就回收了，不存在了
                    #但是此时局部作用域1中的a已经修改成了20（和局部作用域2中的a一样）
outer4()
# 10
# 20
# 20
print('-----------------4-2 函数的嵌套 nonlocal关键字')

a = 10
def outer5():
    a = 20
    def inner2():
        nonlocal a  #nonlocal关键字是：局部当中，往外找离它最近的这个变量，拖进来，进行修改或者访问
        a = 30 #把outer5下的变量a进行修改-重新赋值（注意点：outer4下的变量a已经变成了30）
        print(a)  #30
    inner2()  #30   #这里是局部作用域2中的a（虽然局部作用域2属于局部作用域1，但是是不同的作用域）
                   #局部作用域2用了关键字nonlocal，把局部作用域1的变量进行了修改
                   #局部作用域1和局部作用域2中的变量会同步修改
    print(a) #30   #这里还是局部作用域1中的a，因为inner2（）函数调用完毕后，局部作用域2就回收了，不存在了
                    #但是此时局部作用域1中的a已经修改成了30（和局部作用域2中的a一样,局部作用域2中的a本来是不存在的，用的是局部作用域1中的a）
outer5()
# 30
# 30
print('-----------------4-3 函数的嵌套 nonlocal关键字2')

a = 1
def fun_1():
    a = 2
    def fun_2():
        nonlocal a  #2
        a = 3
        def fun_3():
            a = 4
            print(a) #4   4
        print(a) #3   3
        fun_3() #4    4
        print(a) #3   5
    print(a) #2   2
    fun_2()
    print(a) #3   6
print(a)   #1    1
fun_1()
print(a)  #1     7
print('-----------------4-4 函数的嵌套 nonlocal关键字3')

a = 1
def fun_1():
    a = 2
    def fun_2():
        nonlocal a    #2
        a = 3
        def fun_3():
            a = 4
            print(a)  #4  4
        print(a)  #3  3
        fun_3()
        print(a)  #3 5
    print(a) #2   2
    fun_2()
    print(a) #3  6
print(a)   #1   1
fun_1()
print(a)    #1  7
print('-----------------4-5 函数的嵌套 nonlocal关键字4')

#老师思路
a = 1 #1
def fun_1():  #2
    a = 2  #5  a= 3
    def fun_2(): #6
        nonlocal a   #9
        a = 3  #10  a=3
        def fun_3(): #11
            a = 4  #14
            print(a)  #15 a=4
        print(a)  #12  3
        fun_3()  #13
        print(a)  #16  3
    print(a)  #7 2
    fun_2()  #8
    print(a)  #17  3
print(a)    #3  1
fun_1() #4
print(a)  #18 1
#1 2 3 4 3 3 1
print('-----------------4-6 函数的嵌套 nonlocal关键字5')

def func7():
   global a  #如果没有定义全局变量，这里就是定义了全局变量
   # global a = 20  #这个写法是报错的，  函数内，全局变量的申明和赋值需要分开两行写
   a = 20  #给全局变量赋值20
func7()
print(a)  #20  #打印全局变量
print('-----------------5-1 global关键字')














