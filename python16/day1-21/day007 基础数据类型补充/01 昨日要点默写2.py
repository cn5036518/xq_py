#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""
默写昨日要点
(需要默写两遍，第一遍默写，单节听完视频后1；第二遍默写，全部听完当天视频后--ok)
1、列出知识点标题--4个
2、默写知识点内容

一、小数据池
    分为同一个代码块和不同的代码块
    1、同一个代码块，pycharm中一个py文件就是同一个代码块
    2、cmd下，输入python后，每一行就是一个代码块

    定义：缓存整数、字符串、bool。提高内存使用效率，不用频繁开辟内存空间（新建对象）
    规则：
        数字：缓存范围是-5~256
        字符串：
            1、单个字符默认缓存
            2、多个字符，只有数字、字母、下划线会缓存
            2、字符串*1 同上
            3、字符串*2及以上  只有数字、字母、下划线缓存，最多缓存20位
        布尔值：默认缓存

    同一个代码块下规则是：数字、字符串默认都缓存（第一次创建，就缓存在小数据池，
             下次用到，不需要重复创建对象，直接取小数据池获取）


二、is和==的区别
    ==比较的是值，而不是内存地址
    is比较的是内存地址，通过id，id值相同说明是同一个内存地址（同一个对象）
                            id值不相同说明是不同的内存地址（不同的对象）

三、编码和解码
    ascii    8位-bit 1个字节 主要包括：大小写英文字母、数字、特殊字符
    gbk     16位-bit 2个字节 主要包括：中文字符、日文、韩文、繁体中文字符  兼容ascii
    unicode 32位-bit 4个字节 包含全世界所有国家的字符
    utf-8   可变长度的unicode
        英文字符  8位-bit 1个字节
        欧洲字符 16位-bit 2个字节 （德文字符、法文、西班牙文、拉丁文）
        中文字符 24位-bit 3个字节

    unicode 内存中  明文 str
    utf-8   传输或者存储在硬盘中  （节省空间、缩短传输时间） 密文 bytes

    编码：  str--bytes  明文变密文，大小变小了（英文的话，unicode是4个字节，utf-8是1个字节，压缩了1/4）
        unicode转成utf-8 （编码-加密-压缩）
        bytes1 = s1.encode()  #参数不写默认方式是"utf-8"  返回的是bytes(b开头的)

    解码：bytes--str  密文变成明文，大小变大了（英文的话，utf-8是1个字节，unicode是4个字节，多了4倍空间）
        utf-8转成unicode （解码-解密-解压）
        s1 = bytes.decode()  #参数不写默认方式是"utf-8"  返回的是str











"""














