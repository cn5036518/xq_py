#!/usr/bin/env python
#-*- coding:utf-8 -*-

#切片
#   s[start:end:step]
# 默认是方向是从左往右切片,取头不取尾(左闭右开)  step默认是1(正数)--从左往右取
# 如果step是负数--从右往左取  (step的正负决定取值的方向)

s= "abdjgjgadnff"
print(s[-1:-4])  ## 默认是方向是从左往右切片  这个输出是空
print(s[-4:-1]) #dnf

print(s[1:]) #bdjgjgadnff  从小标是1开始,一直切片到最后  #由于左闭右开,所有最后一位取不到,就end是空白,就取到了--推荐 简洁
print(s[1:12]) #bdjgjgadnff  这里的end取最后一位的下标+1也是可以的,缺点:需要数数

print(s[:4])  #abdj   取最前面的4位  推荐 简洁
print(s[0:4]) #abdj   取最前面的4位

print(s[:])  #abdjgjgadnff  取全部
print(s[::-1])  #ffndagjgjdba  字符串的反转
#这里的step是负数,就是从右往左切片

print(s[5:1]) #这里step默认是1-正数,从左往右切片,输出是空
print(s[5:1:-1])  #djgj   -1是负数,表示从右往左切片 从下标是5开始,一直切片到下标是2
# 取头不取尾,左闭右开,取到下标是1的前一位-下标是2
# 从右往左切片,从5切到1,不包含1,就是从5到2
# 如果是从左往右切片,从1切到5,不包含5,就是从1到4

print(s[-4:-1])  #dnf  从左往右切片,从下标识-4开始,一直切片到-1,不包含-1就是从-4到-2
print(s[-1:-4:-1]) #ffn  这里step是-1负数,从右往左切片,从下标是-1开始,一直切片到-4,但是不包含-4,就是从-1到-3

s= "abdjgjgadnff"
print(s[::2])  #adggdf  从左往右,从下标是0的开始,每间隔2个,取一个字符
print(s[-1:-6:-2])  #fna 步长是-2,从右往左,从-1取到-5  取下标是-1 -3 -5
print(s[::-1])   #ffndagjgjdba  字符串的反转
print(s[::-3])   #fdjd  从右往左取,从-1开始 每次间隔3  取下标是-1 -4 -7 -10

# 结论   切片的适用范围:字符串\列表\元组   有顺序的序列类型的都可以切片(索引,下标)   列表的元素有顺序,可以重复
# 切片: str[start : end : step]
# start: 起始位置
# end: 结束位置 顾头不顾尾
# step: 步长 默认是1. 从左往右取.   -1 从右往左取  (step步长的正负决定方向)

#回文:正着念和反着念,是一样的
s = "上海自来水来自海上"   #比如:level  noon就是回文
if s == s[::-1]:   #判断回文的条件
    print("s这个字符串是回文")
else:
    print("s这个字符串不是回文")

# 字符串和数字本身是不可变的
# 可变的类型:列表,字典,集合









