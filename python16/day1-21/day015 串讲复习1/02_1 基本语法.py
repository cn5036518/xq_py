#!/usr/bin/env python
#-*- coding:utf-8 -*-
#@time:  2019/11/15 6:52
#@author:wangtongpei
#@email: cn5036520@163.com

''''''
'''
一、条件判断、循环
1 条件判断if
    if 条件:
        代码块（语句块）
    elif 条件:
        代码块
    elif 条件：
        代码块
    。。。
    else:
        代码块
2 循环
    1 while循环（条件循环）
        while 条件:
            循环体
            break (结束整个循环-本层，如果是2层循环，只能跳出1层，不能跳出2层)
            continue(结束本次循环-迭代，继续执行下一次循环)
        else:
            pass #当上面的while正常结束后（条件是False的时候，没有出现break），才执行这个语句

    2for循环--主要用于循环遍历取值

3 print
    print(message,end='\n',sep=' ')
    参数1：打印输出的信息
    参数2：行结束符，不写默认是换行 \n
    参数3：分隔符，不写默认是空格
           注意点：打印2个及以上元素，才会用到分隔符，打印一个元素，是用不到分隔符的

4 input  用户交互
5 range
    range(start,end,step) --range和切片的区别，分隔符不同，前者是逗号，后者是冒号
    #step不写，默认是1
    切片：li1(start:end:step)

6 文件路径的分隔符
    win  \   反斜杠-捺杠  \还表示转义 \t \r \n
    linux /  顺斜杠-撇杠

二、运算符
1、算数运算符
    + - * / // % **

2、比较运算符
    > >= < <= == !=

3、逻辑运算符
    and-与  两个同时为真，结果才是真
    or-或   两个中有一个是真，结果就是真
    not-非  非假即真 非真即假

    优先级顺序：  小括号() >not > and >or

    a and b
        如果a不是0，返回b
        如果a是0，返回a

    a or b
        如果a不是0，返回a
        如果a是0，返回b

4、赋值运算符
    += -= *= /= %=
    a+=b 等价于 a = a+b

5、成员运算符
     x in xx
     比如：判断列表或者字典的元素

6、is和==
    is比较的是内存地址
    ==比较的是值
    小数据池：int str bool这三种类型的对象创建之后，符合规则的，会被缓存到小数据池
              下次直接从小数据池中调用，从而节省内存
              比如：a1='jack'  a2='jack'
              在创建变量a1的时候，会新开辟一个内存空间，这个内存空间的名字是a1，里面的值存的是'jack'
                    且把这个内存空间缓存到小数据池子中
              在创建变量a2的时候，不会新开辟另外一个内存空间，而是把a2指向'jack'所在的内存地址
              即a1和a2的内存地址是一样的

7、文件操作
    open（文件路径,mode='模式',encode='编码'）
    模式： r w a r+ w+ a+ rb wb ab
    for循环可以迭代文件句柄，拿到的是一行一行的内容
    seek（0,0） #光标移到文件开头  参数1是偏移量 参数2中：0表示文件开头，1表示文件当前位置，2表示文件末尾
    seek（0,2） #光标移到文件末尾
    seek（0,1） #光标移到当前位置
    tell()  #打印光标的当前位置

    with open(文件路径,mode='模式',encode='编码') as f:
        pass   #不需要flush和close

    文件修改：
        打开源文件，从源文件中读取内容到内存，修改，然后将内容写入到新文件。
        删除源文件，把新文件重命名成源文件的名字

'''














