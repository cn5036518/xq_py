#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""
seek(偏移量[,参考位置])
1、偏移量的单位是字节（utf-8下，一个中文字符是3个字节bytes）
   read的单位是字符，光标移动的单位是字节
   偏移量不能是负数
2、参数2不写默认就是0，表示文件开头算起
    参数2指定0，表示从文件开头算起
    参数2指定1，表示从文件当前光标所在处算起
    参数2指定2，表示从文件末尾算起
    参考位置：
    0-文件开头 1-文件当前光标位置  2-文件末尾
3、回到文件开头：  seek(0)
   回到文件末尾：  seek(0,2)

tell()
打印光标所在位置，单位是字节

小结：
read(1)方法，读写的单位是字符（utf-8下，一个中文字符是3个字节）
seek和tell truncate，光标的移动和显示 截断，单位是字节
"""
path1 = r".\002\2018-09-25.log"
#追加读，  追加是写，没有就新建文件
with open(path1, mode="a+", encoding="utf-8") as f:
    f.seek(0) # 光标移动到开头
    content = f.read() # 读取内容, 此时光标移动到结尾
    print(content)
    f.seek(0) # 再次将光标移动到开头
    f.seek(0, 2) # 将光标移动到结尾
    content2 = f.read() # 读取内容. 什什么都没有
    print(content2)
    f.seek(0) # 移动到开头
    f.write("张国荣") # 写入信息. 此时光标在9 中⽂文3 * 3个 = 9
    # 注意点：追加写模式，只要先读了，追加的时候都在文件末尾，忽略前面的光标所在处
    # （特别注意：忽略光标的位置很少 目前来看，只有读写和追加写 是这个特例）
    print(f.tell())
    # tell显示光标当前位置（单位还是字节）  3个汉字就是9个字节

"""
truncate()
1 参数是空的时候，光标所在位置的后面会被删除，只保留光标所在位置的前面（和光标位置有关）
2 参数指定9的时候，就是只保留文件开头算起，9个字节，其余的都删除（和光标位置无关）
单位是字节

如果不给n（参数是空）, 则从光标当前位置截断. 后⾯的内容将会被删除
关于truncate(n), 如果给出了n. 则从开头进行截断（和光标所在位置无关）
"""
#01 truncate参数是空（删除光标所在位置的后面）
path1 = r".\002\2018-09-26.log"
with open(path1, mode="w", encoding="utf-8") as f:
    f.write("哈呵")
    f.seek(3)  #光标回到文件开头算起的3个字节处，就是第一个汉字后面
    f.truncate() #参数是空，将光标所在位置的后面全部删除，保留光标所在位置的前面
    #结果：哈字保留，呵字删除

#02 truncate参数非空（保留文件开头算起，指定参数的字节数，其余删除，和光标位置无关）
path1 = r".\002\2018-09-27.log"
with open(path1, mode="w", encoding="utf-8") as f:
    f.write("哈呵")
    # f.seek(6)  # 光标回到文件开头算起的6个字节处，就是第2个汉字后面
    f.seek(6)  # 光标回到文件开头算起的6个字节处，就是第2个汉字后面
    f.truncate(3)  # 参数是3，将文件开头算起，保留3个字节，其余删除（和光标所在位无关）
    # 结果：哈字保留，呵字删除

"""
在r+和a+模式下. 如果读取了了内容. 不论读取内容多少. 光标显示的是多少. 再写入
或者操作文件的时候都是在结尾进行的操作.

"""












