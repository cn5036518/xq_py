#!/usr/bin/env python
#-*- coding:utf-8 -*-

# 1，写代码，有如下列表，按照要求实现每一个功能
li = ["alex", "WuSir", "ritian", "barry", "wenzhou"]
# 1)计算列表的长度并输出
print(len(li))  #5

# 2)列表中追加元素"seven",并输出添加后的列表
li.append("seven")
print(li)  #['alex', 'WuSir', 'ritian', 'barry', 'wenzhou', 'seven']

# 3)请在列表的第1个位置插入元素"Tony",并输出添加后的列表
li.insert(0,"Tony")
print(li) #['Tony', 'alex', 'WuSir', 'ritian', 'barry', 'wenzhou', 'seven']

# 4)请修改列表第2个位置的元素为"Kelly",并输出修改后的列表
li[1] = "kelly"
print(li)  #['Tony', 'kelly', 'WuSir', 'ritian', 'barry', 'wenzhou', 'seven']

# 5)请将列表l2=[1,"a",3,4,"heart"]的每一个元素添加到列表li中，⼀行代码实
# 现，不允许循环添加。
l2=[1,"a",3,4,"heart"]
li.extend(l2)
print(li) #['Tony', 'kelly', 'WuSir', 'ritian', 'barry', 'wenzhou', 'seven', 1, 'a', 3, 4, 'heart']
print("--------------------1")

# 6)请将字符串s = "qwert"的每⼀个元素添加到列表li中，⼀行代码实现，不
# 允许循环添加。
s = "qwert"
li.extend(s)
print(li)  #['Tony', 'kelly', 'WuSir', 'ritian', 'barry', 'wenzhou', 'seven',
# 1, 'a', 3, 4, 'heart', 'q', 'w', 'e', 'r', 't']

# 7)请删除列表中的元素"eric",并输出添加后的列表
# 8)请删除列表中的第2个元素，并输出删除的元素和删除元素后的列表
li = ["alex", "WuSir", "ritian", "barry", "wenzhou"]
s1 = li.pop(1)
print(s1) #WuSir
print(li) #['alex', 'ritian', 'barry', 'wenzhou']

# 9)请删除列表中的第2⾄至4个元素，并输出删除元素后的列表
li = ["alex", "WuSir", "ritian", "barry", "wenzhou"]
del li[1:4]  #切片删除多个元素
print(li) #['alex', 'wenzhou']

# 10)请将列表所有的元素反转，并输出反转后的列表
li = ["alex", "WuSir", "ritian", "barry", "wenzhou"]
#方法1 反转不修改原列表  切片
print(li[::-1]) #['wenzhou', 'barry', 'ritian', 'WuSir', 'alex']
#方法2 反转修改原列表
li.reverse()
print(li) #['wenzhou', 'barry', 'ritian', 'WuSir', 'alex']

# 11)请计算出"alex"元素在列表li中出现的次数，并输出该次数。
li = ["alex", "WuSir", "ritian", "barry", "wenzhou"]
print(li.count("alex"))  #1
print("--------------------题目2")

# 2，写代码，有如下列表，利用切片实现每⼀个功能
li = [1, 3, 2, "a", 4, "b", 5,"c"]
# 1)通过对li列表的切片形成新的列表l1,l1 = [1,3,2]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l1 = li[:3]
print(l1) #[1, 3, 2]

# 2)通过对li列表的切片形成新的列表l2,l2 = ["a",4,"b"]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l2 = li[3:6]
print(l2) #['a', 4, 'b']

# 3)通过对li列表的切片形成新的列表l3,l3 = ["1,2,4,5]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l3 = li[::2]
print(l3)  #[1, 2, 4, 5]

# 4)通过对li列表的切片形成新的列表l4,l4 = [3,"a","b"]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l4 = li[1:-2:2]
print(l4) #[3, 'a', 'b']

# 5)通过对li列表的切片形成新的列表l5,l5 = ["c"]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l5 = li[-1]  #这里取的是元素"c"
print(l5)  #c  #返回的是字符串

l6 = li[-1:] #这里的步长是1，正数，从左到右取值   多了一个冒号:
print(l6)  #["c"]   #注意点1   #返回的是列表
"""
注意：
1、通过索引号-1取值的是最后一个元素
2、通过切片li[-1:]
    步长是1，正数，从左到右取值，这里取出的是只有最后一个元素的列表
区别：li[-1]取出的是元素"c"，===返回的是字符串
      li[-1:]取出的是列表（列表的元素是最后一个）--["c"]===返回的是列表
"""

# 6)通过对li列表的切片形成新的列表l6,l6 = ["b","a",3]
li = [1, 3, 2, "a", 4, "b", 5,"c"]
l6 = li[-3::-2]
print(l6) #['b', 'a', 3]
print("--------------------题目3")

# 3,写代码，有如下列表，按照要求实现每一个功能。
# lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
# 1)将列表lis中的"tt"变成大写（用两种⽅式）。
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
#方法1  upper() 变成大写--推荐1（知识点是字符串的操作方法）
lis[3][2][1][0] = lis[3][2][1][0].upper()  #全部转换成大写字母  #变成大写后，必须要重新赋值才行
#注意：变成大写后，如果没有重新赋值，原来的元素是没有任何改变的
#对字符串操作后，是产生了新字符串，对原来的字符串没有任何改变，要改变原来的字符串，必须用新的字符串对原字符串进行重新赋值才行
print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv']

#方法2  swapcase() 大小写互转
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][0] = lis[3][2][1][0].swapcase() #小写转大写，大写字母转小写
#小写转换成大写后，必须要重新赋值才行
print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv']
# print("--------------3-0")

#方法3  通过索引号找到指定位置，直接赋值"TT"（对原字符串进行了重新赋值）
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][0] = "TT"  #通过索引号找到指定的位置，直接赋值"TT"
print(lis)

#方法4  replace()  替换   --推荐2（知识点是字符串的操作方法）
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][0] = lis[3][2][1][0].replace("t","T")  #字符串的操作方法--替换
# （产生了一个新的字符串，原来的字符串没有变化，必须对原来的字符串进行重新赋值才行）
print(lis)  #通过索引号找到指定的元素，将元素中的"t"替换成"T",最后赋值回去
print("--------------3-0")

# 2)将列表中的数字3变成字符串"100"（⽤两种⽅式）。
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
#方法1
lis[3][2][1][1] = "100"  #通过层层索引号，找到指定的元素，然后直接赋值
lis[1] = "100"
print(lis)  #[2, '100', 'k', ['qwe', 20, ['k1', ['tt', '100', '1']], 89], 'ab', 'adv']

#方法2  错误的
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
for i in lis:
    # print(i)
    if i == 3:
        i = "100"  #关键点，这里只是修改了第一层的i，且对于列表本身没有任何修改
# print(lis)

#方法3 递归 for range(len(lis))   重点
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
def forcase_100(lis):
    for i in range(len(lis)):  #通过for循环 range(len(lis)) 必须通过索引号取值 lis[i]
        if type(lis[i]) == list: #判断每个元素的类型是否是列表
            forcase_100(lis[i]) #类型是列表的话，就递归，自己调用自己，传入的实参是lis[i]-列表的元素而不是lis-列表本身
        else:#2 如果每个元素的类型不是列表
            if lis[i] == 3: #判断元素的值是否是3
                lis[i] = "100" #将元素lis[i]修改，而不是将i修改（只修改i的话，对列表本身任何修改）  关键点
                #这里必须是lis[i]通过索引号取值的方式，关键点
forcase_100(lis) #调用函数，传入实参是列表
print(lis) #打印列表 [2, '100', 'k', ['qwe', 20, ['k1', ['tt', '100', '1']], 89], 'ab', 'adv']

#方法4
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][1] = str(lis[3][2][1][1]+97) #int转换成str
lis[1] = "100"
print(lis)
print("--------------3-1")

# 3)将列表中的字符串"1"变成数字101（⽤两种⽅式）。
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
#方法1
lis[3][2][1][-1] = 101
print(lis)  #[2, 3, 'k', ['qwe', 20, ['k1', ['tt', 3, 101]], 89], 'ab', 'adv']

#方法2  递归1  for循环   错误的
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
def forcase1(lis):
    for i in lis:
        if type(i) == list:#如果元素的类型是列表， 就继续for循环
            # print("22")
            forcase1(i) #递归，自己调用自己，注意：传入的参数是i，而不是lis
        else: #如果元素的类型不是列表
            # print("33")
            if i == "1": #判断元素是否是字符串"1"
                # print("44")
                i = 101  #是字符串1的话，就修改元素为数字101
                #注意2：关键点 这里只是把i修改为101，而对原列表没有任何改变 关键点
                #这里必须通过索引的方式取值  for循环+range(len)  his[i]=101才行 而不是i=101
                # print("5")
forcase1(lis)  #调用函数，传入列表   #调用后，列表的元素"1"就变成了数字101(其实没变，因为只是修改了i，而没有修改列表本身)
print(lis)  ##打印修改后的列表（其实；列表没有任何改动）
# #[2, 3, 'k', ['qwe', 20, ['k1', ['tt', 3, '1']], 89], 'ab', 'adv']

#方法3 递归 for循环 range(len(his))--扩展思路
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
def forcase2(his):
    for i in range(len(his)):  #for循环 遍历通过索引号取值每个元素 his[i]
        if type(his[i]) == list: #1判断每个元素的类型是否是列表
            forcase2(his[i])  #递归 自己调用自己  注意1：传入的参数是his[i]-每个元素，而不是传入的his列表
        else: #2 如果元素的类型不是列表
            if his[i] == "1": #判断元素是否是字符串“1”
                his[i] = 101 #注意2：修改列表本身，而不是只修改i  关键点
forcase2(lis)  #调函数，传入实际参数是列表lis
print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['tt', 3, 101]], 89], 'ab', 'adv']

#方法4
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][-1] = int(lis[3][2][1][-1]) +100  #把字符串"1"转换成整数1后+100就是整数101
print(lis)

#方法5
lis = [2, 3, "k", ["qwe", 20, ["k1", ["tt", 3, "1"]], 89], "ab", "adv"]
lis[3][2][1][-1] = int(lis[3][2][1][-1] +"01")  #把字符串"1"拼接成字符串"101",然后转换成整数101
print(lis)

"""
递归函数的思路
1、通过for循环+range(len(lis)) ,通过lis[i]取索引号来取值的方式 遍历列表的元素
2、判断列表的每个元素的类型是否是list
    是的话，就递归，自己调用自己，传入的实际参数是lis[i],而不是lis  注意点1
3、如果列表的元素的类型不是list
    判断元素的值是否是字符串"1"
    如果是的话，就lis[i] = 101 来修改列表，而不是i = 101（这个对列表没有任何修改） 关键点
4、调用函数，传入实参是lis
5、打印修改后的列表
"""


















