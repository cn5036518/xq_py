#!/usr/bin/env python
#-*- coding:utf-8 -*-

#一 嵌套循环
#1打印1-10之间的素数-质数
i=2
while i<10:
    j=2
    while j<=(i/j):
        if not i%j: #余数是0-false，代表可以整除
            break #跳出内部的while循环，跳出后，下面的J+=1就不执行
        j+=1
    if j>(i/j):
        print(i,"是素数")
    i+=1

#二 切片和格式化输出
var1="hello xiaoqiang"
var2="hello program"

print("var1[0]",var1[0])  #h
print("var2[1:5]",var1[1:5]) #输出索引号-下表是1-4，即第2-5位   #ello
print()  #换行 等效于print("\n")
print("更新追加后的字符串=",var1[:6]+"xq\n") # "hello xq"后面是换行符 \n--引号内  拼接字符串
    #注意切片的语法 间隔符是冒号： 而不是逗号，
print("jishu")

#三 格式化输出  %s-字符 %d-数字 %.2f-浮点数 占位符   %是分隔符    #是%s  而不是s%
print("我是%s,年龄%d" % ("xq",18))    #正确1
print("我是%s,年龄%s" % ("xq2",18))   #正确2    可以用%s完全代替%d   推荐
print("我是%s,年龄%s" % ("xq2","19")) #正确3    可以用%s完全代替%d
# print("我是%d,年龄%s" % ("xq",18))  #错误1     但是不能用d%代替%s   最好是用%s完全代替%d

#四 列表中的操作  参数中，x表示元素  i表示索引号-小标
#一、增删改查
#1 查   从列表中获取元素   切片-下标的方式取值
print("列表")
li1=["jack","tom"]
li2=[0,1,2,3]
print(li1[0])  #jack  #通过下标-索引号取某个元素
print(li2[1:3]) #[1,2] #通过切片取多个元素组成的子列表
print("列表取值--===========--查")

#2 改  修改列表中的元素
li2=[0,1,2,3]
print("修改前的列表li2是",li2)
li2[2]=4
print("修改后的列表li2是",li2)  #[0,1,4,3]
print("列表修改=====----改")

#3 删  删除列表中的元素
#00 del删除
li3=[0,1,2,3]
del li3[2]  #del 通过索引号-下标删除某个元素 del方法不限于列表
print("del删除后的列表li3是",li3) #[0,1,3]

#01 pop删除
li3=[0,1,2,3]
li3.pop()  #pop() 没有参数表示默认删除最后一个元素
print("pop()删除后的列表li3是",li3) #[0,1,2]
li3=[0,1,2,3]
li3.pop(2) #表示删除索引号是2的元素
print("pop(2)删除后的列表li3是",li3)  #[0,1,3]

#02 remove删除
li3=[0,1,2,3]
li3.remove(3)  #remove 通过元素的值，删除某个元素
# li3.remove(55) #ValueError: list.remove(x): x not in list
print("remove删除后的列表li3是",li3) #[0,1,2]

#03 clear全部删除-清空列表
li3=[0,1,2,3]
li3.clear()  #
print("clear全部删除-清空后的列表li3是",li3) #[]
print("列表删除=====---=====-删")

#4 增 增加列表中的元素
#01 append 列表后增加一个元素
#02 insert(i,x) 列表的指定位置之前--按照指定下标 增加一个元素
#03 extend 将列表2合并到列表1--即列表2的元素全部加到列表1的元素之后


#01 append 列表后增加一个元素
li4=[0,1,2,3]
li4.append(4) # [0,1,2,3,4]
print(li4)

#02 insert(i,x) 列表的指定位置之前--按照指定下标 增加一个元素
li4=[0,1,2,3]
li4.insert(0,5) #[5,0,1,2,3]  #在索引号是0的位置之前，插入元素5
print(li4)
#第一个参数是索引号
#第二个参数是待插入的元素值

#03 extend 将列表2合并到列表1--即列表2的元素全部加到列表1的元素之后
li4=[0,1,2,3]
li5=["jack","tom"]
li4.extend(li5)
print(li4)  #[0,1,2,3,"jack","tom"]
print("列表增加=====---=====增")

#二 返回指定元素的索引号  index(x)  从左边开始，第一次出现的元素x的索引号
#三 计算某个元素出现的次数 count(x)
#四 排序（正序活着反向排序）  sort()  reverse()

#二 返回指定元素的索引号  index(x)  从左边开始，第一次出现的元素x的索引号
li5=[0,4,5,1,2,4,3]
print(li5.index(4)) #1   #返回从左边开始，第一次出现的元素4的索引号
# print(li5.index(456))  #ValueError: 456 is not in list

#三 计算某个元素出现的次数 count(x)
li5=[0,4,5,1,2,4,5,3]
print(li5.count(5)) #2  #返回元素5在列表中出现的次数

"""
sort()和sorted()的区别
1、li5.sort()是修改了原列表，
    sort()是列表特有的内置方法
2、区别1：li6=sorted(li5)是没有修改原列表，产生了排序后的新列表
    区别2  sorted(li5)不限于列表排序，还可以用于字符串排序-但返回的事列表（注意：字典是无序的，就不适用了）
    sorted(str1)
"""

str1="jack"
li2=sorted(str1) #将字符串中的字符升序排列  返回列表
print("sorted字符串",li2) #sorted字符串 ['a', 'c', 'j', 'k']

#四 排序（正序或者反转）  sort()  reverse()
#1、数字的从小到大排序  sort()  sorted()
li5=[0,4,5,1]
li5.sort()  #数字的从小到大排序 sort（）修改了原列表，没有单独再产生新的列表-排序后的   该方法列表特有
print("sort()数字从小到大排序",li5) #[0,1,4,5]

li5=[0,4,5,1]
li6 = sorted(li5) #sorted()没有修改原列表--产生了排序后的新列表   该方法不限于列表
print(li5)  #[0,4,5,1]
print("sorted()排序",li6) #[0,1,4,5]

#2、字符串的首字母升序排列
li5=["jack","tom","bob"]
li5.sort()  #字符串排序   首字母的升序排列
print("sort()字符串首字母升序排序",li5) #["bob"，"jack","tom"]

#3、列表元素的反转  reverse()  sorted(li5,reverse=True)  [::-1]
li5=[0,4,5]
li5.reverse() #将列表的元素反转1  reverse（）修改了原列表
print("reverse()反转",li5)# [5,4,0]

li5=[0,4,5]
li6 = sorted(li5,reverse=True) #将列表的元素反转2   sorted()没有修改原列表--产生了排序后的新列表
print("sorted(li5,reverse=True)反转输出",li6)# [5,4,0]

li5=[0,4,5]
li6=li5[::-1]  #可以直接实现反转   li5[::-1]没有修改原列表--产生了排序后的新列表
print("[::-1]反转",li6)  #[5, 4, 0]


#4 数字的从大到小排序
"""
思路
1、先将列表中数字从小到大排序  sort()  sorted()
2、再讲从小到大后的列表反转即可 reverse() sorted(li,reverse=True)
"""
li5=[0,4,5,1]
li5.sort()  #[0,1,4,5]
li5.reverse() #[5, 4, 1, 0]
print("数字从大到小排序",li5)

#5 字符串的首字母降序排列
"""
思路
1、先将列表中字符串的首字母升序排列  sort()-修改了原列表  sorted()-没有修改原列表
2、再将字符串升序排列后的的列表反转即可 reverse() sorted(li,reverse=True)
"""
li5=["jack","tom","bob"]
li5.sort()  #["bob"，"jack","tom"]
li5.reverse() #["tom"，"jack","bob"]
print("字符串首字母降序排序",li5)

#6 切片进阶
li5=[0,4,5,6,7]
# li61=li5[0:3] #[0,4,5]  #参数3：步长不写省略默认是1
# li61=li5[0:3:] ##[0,4,5]  #参数3：步长不写省略默认是1
li61=li5[0:3:1]  #[0,4,5]   参数1：代表索引号是0开始取值   参数2：代表取值到索引号是2,不包含2   参数3：步长-默认是1
print(li61)  #步长是1.代表从左往右取值

li5=[0,4,5,6,7]
li62=li5[:]    #[0,4,5,6,7]  #li5[:]  复制原列表
print(li62)

li5=[0,4,5,6,7]
# li63=li5[::] #[0,4,5,6,7]
li63=li5[::1]  #[0,4,5,6,7]
print(li63)

li5=[0,4,5,6,7]
li64=li5[-1:0:-1]  #[7, 6, 5, 4] 参数1：代表索引号是-1开始取值   参数2：代表取值到索引号是0,不包含0   参数3：步长是-1
print(li64)  #步长是-1.代表从右往左取值

li5=[0,4,5,6,7]
li66=li5[-2:0:-1]  #[ 6, 5, 4] 参数1：代表索引号是-1开始取值   参数2：代表取值到索引号是0,不包含0   参数3：步长是-1
print(li66)  #步长是-1.代表从右往左取值

li5=[0,4,5,6,7]
li67=li5[-1:0:-2]  #[ 7, 5] 参数1：代表索引号是-1开始取值   参数2：代表取值到索引号是0,不包含0   参数3：步长是-1
print(li67)  #步长是-2.代表从右往左取值

li5=[0,4,5,6,7]
li68=li5[0:1:-1]  #[]  注意，参数一是0的话，步长是-1，就是[]  索引号是0的元素-第一个元素，往左取值，是[]
li69=li5[-1:0]  #[]    注意，参数一是-1的话，步长是1，就是[]   索引号是-1的元素-最后一个元素，往右取值，是[]

li5=[0,4,5,6,7]  #常用反转
li65=li5[::-1]   #[7, 6, 5, 4,0] 参数1：代表索引号是-1开始取值   参数2：代表取值到索引号是0,包含0   参数3：步长是-1
print(li65)  #步长是-1.代表从右往左取值















