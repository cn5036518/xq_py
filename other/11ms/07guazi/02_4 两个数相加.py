#!/usr/bin/env python
#-*- coding:utf-8 -*-

#需求 计算两个数相加  底层算法
"""
思路：
1、2个数字用字符串类型表示
2、遍历循环字符串，将每个元素依次添加到空列表1,2
3、空列表的首个元素是0，从而解决2+9=11，多出一位的问题
4、通过索引，遍历循环列表1，for中，将列表1和列表2同一位置的元素相加，相加之和依次添加到空列表3--关键点1
5、循环遍历列表3，处理进位问题--通过索引号遍历循环
    如果当前位大于10，就除以10，取余数
    提示，当前位的前一位自增1--进位
6、列表转换成字符串（注意点：列表的元素是字符串，才能使用join，元素是数字是不能使用join的）
7、字符串转换成int

注意点：
1、空列表的首个元素是0，从而解决2+9=11，多出一位的问题
2、需要考虑进位
    同一位置的两个数之和大于10，就除以10，取余数
    同时，前一位自增1

步骤：
1、先位数相等
2、在考虑位数不等
"""

# 1、2个数字用字符串类型表示
# 2、遍历循环字符串，将每个元素依次添加到空列表1,2
s1 = "222"
s2 = "2999"

li1 = [0]
li2 = [0]
for i in s1:
    li1.append(i)
for i in s2:
    li2.append(i)
print(li1)  #[0, '2', '2', '2']
print(li2) #[0, '9', '9', '9']

#解决两个列表因为长度不一样，可能出现索引越界或者多出位没有参加计算的情况
#解决办法，在短的列表第一个位置前面插入0，补0,来实现位数一样
differerce = abs(len(li1)-len(li2))
if len(li1) > len(li2):
    for i in range(differerce):
        li2.insert(0,0)
else:
    for i in range(differerce):
        li1.insert(0, 0)
print(li1) #[0, 0, '2', '2', '2']
print(li2) #[0, '2', '9', '9', '9']

# 3、空列表的首个元素是0，从而解决2+9=11，多出一位的问题
# 4、通过索引，遍历循环列表1，for中，将列表1和列表2同一位置的元素相加，相加之和依次添加到空列表3--关键点1
li3 = []
for i in range(len(li1)):
    sum1 = int(li1[i])+int(li2[i]) #注意点1：字符串转换成int后 进行计算
    li3.append(sum1)
print(li3)  #[0, 11, 11, 11]

# 5、循环遍历列表3，处理进位问题--通过索引号遍历循环
#     如果当前位大于10，就除以10，取余数
#     提示，当前位的前一位自增1--进位
for i in range(len(li3)):   #对列表的元素进行修改，必须通过索引号取值
    if li3[i] > 10:
        li3[i] = li3[i] % 10  #当前位，除以10，取余数
        li3[i-1] = li3[i-1] +1 #当前位的前一位，自增1
print(li3)  #[1, 2, 2, 1]

# 6、列表转换成字符串（注意点：列表的元素是字符串，才能使用join，元素是数字是不能使用join的）
s3 = ""
for i in li3:
    s3 = s3+str(i)  #注意点2：这里的元素是数字，需要转换成字符串才能和""拼接，否则报错（数字和字符串是不能拼接+的）
print(s3)  #03221  字符串类型

# 7、字符串转换成int  (字符串前面的0，会自动去掉)
sum = int(s3)
print(sum)  #3221  int类型
















