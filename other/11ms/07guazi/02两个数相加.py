#!/usr/bin/env python
#-*- coding:utf-8 -*-

#计算两个数的和，+的底层算法
# 使用列表的方式实现两个大数字相加的操作
#
# 思路：
# 1，把输入的数字转化为列表，
# 2，比较列表的长度，不够的就在前面补0
# 3，将两个列表元素逐个相加，得出新的列表
# 4，如果元素大于等于10，则将这个元素重新赋值为取余10之后的结果，并且将前一个元素加一，
# 5，将结果输入即可。
# ---------------------


num1 = "1234"
num2 = "987"

# 创建列表，用来保存输入的数字
# 这里的列表里必须先放入0,以解决两数相加要创建新的一位的问题，例如 98 + 4 = 102
li1 = [0]
li2 = [0]

# 循环遍历输入的字符串类型的数字，将其转化成int类型，并添加到创建的列表中
for i in num1:
    li1.append(int(i))
for i in num2:
    li2.append(int(i))
print(li1)  #[0, 1, 2, 3,4]
print(li2)  #[0, 9, 8, 7]

# 判断两个列表的长度，使list1和list2的长度相等，不够的，就补0(补0是为了避免后面的越界)
if len(li1) > len(li2):
    for i in range(len(li2), len(li1)):
        li2.insert(0, 0)
else:
    for i in range(len(li1), len(li2)):
        li1.insert(0, 0)
print(li1)  #[0, 1, 2, 3,4]
print(li2)  #[0,0, 9, 8, 7]

# 将两个列表中的数据相加合并到li1中
for i in range(len(li1)):
    li1[i] = li1[i] + li2[i]
print(li1)  #[0, 1, 11, 11, 11]

# 循环判断每一个元素的大小，如果大于10，就让原来大于10的数字变成取余之后的数字,使大于10的元素的前一个元素加一，模拟进位制
# 这里的i表示的是li1列表的下标，从最后一个元素起，便遍历到第一个元素（反向遍历）
for i in range(len(li1) - 1, 0 - 1, -1):
    if li1[i] >= 10:
        li1[i] = li1[i] % 10
        li1[i - 1] = li1[i - 1] + 1

# 如果数字前面是0，则默认去掉前面的0，例如00456应该输出的是456
# 使用字符串切片，把数字前面的0去掉
s1 = ""
for i in li1:
    s1 += str(i)
if s1.startswith("0"):
    s1 = s1[1:]

print(s1)











