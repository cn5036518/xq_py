#!/usr/bin/env python
#-*- coding:utf-8 -*-

#计算两个数的和，+的底层算法
# 使用列表的方式实现两个大数字相加的操作
#
# 思路：
# 1，把输入的数字转化为列表，
# 2，比较列表的长度，不够的就在前面补0
# 3，将两个列表元素逐个相加，得出新的列表
# 4，如果元素大于等于10，则将这个元素重新赋值为取余10之后的结果，并且将前一个元素加一，
# 5，将结果输入即可。
# ---------------------

"""
步骤：
1 先位数相等
    注意点1：判断进位问题
2 再考虑位数不等--nok  未完成
    注意点2：如果两个列表的长度不一样，在循环遍历过程中，进行两个列表的元素相加的时候，短的列表会出现越界的情况--报错
    IndexError: list index out of range
"""

n1 = "1554"
n2 = "917"

li1 = [0]  #解决8+4=12  多了一位1   注意点1
li2 = [0]

for i in n1:
    li1.append(i)  #1 将字符串中的而数字依次添加到空列表1
for i in n2:
    li2.append(i)
print(li1)  #[0, '5', '5', '4']
print(li2)  #[0, '9', '1', '7']

li3 = []
for i in range(len(li1)):
    sum1 = int(li1[i]) + int(li2[i])  #2 将两个列表中的元素（字符转成int），相加的和后，依次添加到空列表3
    li3.append(sum1)
print(li3)  #[0, 14, 6, 11]

for i in range(len(li3)):  #通过索引，循环遍历列表3
    if li3[i] > 10:  #3 判断进位问题，如果两个数之和大于10，就需要进位
        li3[i] = li3[i]%10 #4 进位的处理，当前位，用除以10取余数即可
        li3[i-1] = li3[i-1] +1 #5 当前位的前一位，自增1即可
print(li3)  #[1, 4, 7, 1]











